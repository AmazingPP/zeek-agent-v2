#! /usr/bin/env python3
#
# Generates a Markdown reference from the agent's --autodoc output, which
# must be piped in on stdin.

import json
import sys
import textwrap

def fatalError(message: str):
    print(message, file=sys.stderr)
    sys.exit(1)

def fmtDoc(doc):
    n = []
    doc = doc.split("\n\n")
    for i in doc:
        x = textwrap.dedent(i).strip()
        wrapped = textwrap.fill(x)
        if wrapped:
            n += [wrapped]

    return "\n\n".join(n)

def renderTable(name, meta):
    platforms = []
    for p in meta["platforms"]:
        if p == "linux":
            platforms.append("Linux")

        elif p == "darwin":
            platforms.append("macOS")

        else:
            platforms.append(p)

    print("<details>")
    print("<summary><tt>{}:</tt> {} [{}]</summary>".format(name, meta["summary"], ", ".join(sorted(platforms))))
    print()

    description = fmtDoc(meta["description"])
    if len(description):
        print(description)
        print()

    print("| Column | Type | Description")
    print("| --- | --- | --- |")

    for column in meta["columns"]:
        name = column["name"]
        comment = column["summary"]
        type = column["type"]

        print("| `{}` | {} | {} |".format(name, type, comment))

    print("</details>")
    print()

### Main

try:
    data = json.load(sys.stdin)
except ValueError as e:
    fatalError("cannot parse input: {}".format(e))

for tbl in sorted(data["tables"].keys()):
    renderTable(tbl, data["tables"][tbl])
