#! /usr/bin/env bash
#
# Submits a bundle (e.g., a DMG or ZIP) for Apple notarization.
#
# This script can sign with either application or installers certificates. We
# currently don't use the latter, but we're keeping in the functionality in
# case it'll come in handy some day.
#
# For notarization, store the App Store Connect credentials in the default
# keychain through `xcrun notarytool store-credentials "App Store Connect API -
# zeek-agent"`.

set -e

function usage {
    echo "Usage: $(basename $0) application|installer <bundle>" >&2
}

if [ $# != 2 ]; then
    usage
    exit 1
fi

base=$(cd $(dirname $0)/../.. && pwd)
app_src=${base}/src/platform/darwin/ZeekAgent.app
sign_type=$1
bundle=$2

echo "== Notarizing bundle ..."

if [ "${sign_type}" == "installer" ]; then
    if [ -z "${MACOS_CERTIFICATE_INSTALLER_ID}" ]; then
        echo "Error: MACOS_CERTIFICATE_INSTALLER_ID not set" >&2
        exit 1
    fi

    echo "-- Signing installer ..."
    productsign --sign "${MACOS_CERTIFICATE_INSTALLER_ID}" "${bundle}" "${bundle}.tmp"
    mv "${bundle}.tmp" "${bundle}"

elif  [ "$1" == "application" ]; then
    if [ -z "${MACOS_CERTIFICATE_APPLICATION_ID}" ]; then
        echo "Error: MACOS_CERTIFICATE_APPLICATION_ID not set" >&2
        exit 1
    fi

    echo "-- Signing bundle ..."
    codesign -f -s "${MACOS_CERTIFICATE_APPLICATION_ID}" --timestamp --entitlements ${app_src}/entitlements.plist.app ${bundle}

else
    usage
    exit 1
fi

echo "-- Uploading for notarization ..."

xcrun notarytool submit --keychain-profile "App Store Connect API - zeek-agent" --wait --timeout 20m "${bundle}"

echo "-- Stapling ..."

xcrun stapler staple ${bundle}

echo "-- Verifying ..."

spctl -a -vv -t install ${bundle}
xcrun stapler validate ${bundle}
