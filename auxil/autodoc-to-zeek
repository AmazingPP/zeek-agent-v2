#! /usr/bin/env python3
#
# Generates a Zeek record definition from the agent's --autodoc output, which
# must be piped in on stdin.Ã¤

import json
import os
import os.path
import sys
import textwrap

def fatalError(message: str):
    print(message, file=sys.stderr)
    sys.exit(1)

def snakeToCamel(x):
    return ''.join(x.title() for x in x.split("_"))

def fmtComment(txt, prefix, single_line=False):
    txt = txt.strip()
    if not txt:
        return ""

    prefix += " "

    if single_line:
        return "{} {}".format(prefix, txt)
    else:
        return textwrap.fill(txt, initial_indent=prefix, subsequent_indent=prefix)

def fmtID(id):
    if id == "time":
        return "time_"

    return id

### Main

if len(sys.argv) != 2:
    fatalError("usage: {} <table name>".format(os.path.basename(sys.argv[0])))
    sys.exit(1)

try:
    data = json.load(sys.stdin)
except ValueError as e:
    fatalError("cannot parse input: {}".format(e))

table_name = sys.argv[1]

try:
    table = data["tables"][table_name]
except Exception:
    fatalError("no such table")

indent = "\t"

summary = table["summary"].capitalize()
if not summary.endswith("."):
    summary += "."

print("{}{}".format(indent, fmtComment(summary, "##")))
print("{}type Columns: record {{".format(indent))

for column in table["columns"]:
    name = fmtID(column["name"])
    comment = column["summary"]
    type = column["type"]

    if type == "int":
        type = "int"
    elif type == "text" or type == "blob":
        type = "string"
    elif type == "real":
        type = "double"
    elif type == "null":
        # ignore
        continue
    else:
        fatalError("unknown column type '{}'".format(type))

    print("{}{}{}: {} &optional &log;{}".format(indent, indent, name, type, fmtComment(comment, "\t##<")))

print("{}}};".format(indent))
